* motion model 1:
start simple only 3D position, ignore rotation. How?

    *(x,y,z)
                *'(x,y,z)


       V___
           --___V'


1. gets rel target position
2. calcs diff from desired position
3. moves the tool with this error

After this is done:
smoothing:
1. set distance threashold.
2. if within the threashold, do not update!

better speed limits:
1. calc L2 distance and limit by that.

brakeing:
1. keep a "current speed" vector (maybe can get from robot) 
2. if the speed is roughly in the right direction, and we are close(threashold) - slower speed.


motion model 2:
angular - only rotation.

    *(x,y,z)
    |
    |
    | 
    V ----- *

use quaternions!
1. get dir vec from tool to target
2. trans to the desired rot
3. apply step using quaternions.



pixels to (x,y,z):
1. get the x,y on screen space.
2. set the z value (hardcoded or by model)
3. apply inv of the projection (need some camera measurments)




=====================

System pipline:

1. camera captures obj in screen space.
2. convertion to camera space. (x,y,z,0,0,0)
3. target position in camera space is passed to the control.
4. We got:
   - t_pose (cam space)
   - d_pose (cam space)
   - r_pose (in world space) 

We need to transform t_pose to d_pose by changing r_pose

t_pose_w = r_pose @ t_pose
d_pose_w = r_pose @ d_pose


extras:
UI select
visualizer record
visualizer joints
visualizer all object
vision multiple objects
vision out of frame
vision merging bbox - identify, (area vs convex)
control/UI change desired position
control angle control?